--LATEST BABFT
---@diagnostic disable: undefined-global
--BABFT MAR19Y2025
if game.PlaceId ~= 537413528 then
    return
end

if not isfolder("BABFT") then
    makefolder("BABFT")
end

if not isfolder("BABFT/Image") then
    makefolder("BABFT/Image")
end

local folderName = "ImagePreview"
local previewFolder = Workspace:FindFirstChild(folderName) or Instance.new("Folder", Workspace)
previewFolder.Name = folderName

previewFolder:ClearAllChildren()

local BlockId = loadstring(game:HttpGet('https://raw.githubusercontent.com/TheRealAsu/BABFT/refs/heads/main/BlockId.lua'))()
local NormalColorBlock = loadstring(game:HttpGet('https://raw.githubusercontent.com/TheRealAsu/BABFT/refs/heads/main/AutoBuild/NormalColorBlock.lua'))()

-- ReGui library
local ImGui = loadstring(game:HttpGet('https://raw.githubusercontent.com/depthso/Dear-ReGui/refs/heads/main/ReGui.lua'))()
local PrefabsId = `rbxassetid://{ImGui.PrefabsId}`

ImGui:Init({
	Prefabs = game:GetService("InsertService"):LoadLocalAsset(PrefabsId)
})

local HttpService = cloneref(game:GetService("HttpService"))
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local player = game.Players.LocalPlayer
local Nplayer = game.Players.LocalPlayer.Name

local AutoBuilder = ImGui:TabsWindow({
    Title = "Auto Builder",
    Size = UDim2.fromOffset(248, 426),
    Position = UDim2.new(0.5, -245, 0.5, -250),
    NoClose = true,
})

local Image = AutoBuilder:CreateTab({
	Name = "Image Loader"
})

local BlockNeeded = AutoBuilder:CreateTab({
	Name = "List"
})

local function LPTEAM()
    local teamName = player.Team.Name

    local zoneMapping = {
        black = "BlackZone",
        blue = "Really blueZone",
        green = "CamoZone",
        red = "Really redZone",
        white = "WhiteZone",
        yellow = "New YellerZone",
        magenta = "MagentaZone"
    }

    local selectedZoneName = zoneMapping[teamName]

    if selectedZoneName then
        local zone = workspace:FindFirstChild(selectedZoneName)
        if zone then
            return zone.position + Vector3.new(-100, 150, 0)
        end
    end
end

local imagePreviewFolder = workspace:FindFirstChild("ImagePreview") or Instance.new("Folder")
imagePreviewFolder.Name = "ImagePreview"
imagePreviewFolder.Parent = workspace

local UserBlockList = {}
local dataFolder = Players.LocalPlayer.Data
local BlockType = "PlasticBlock"
local LPBlockvalue = UserBlockList[BlockType]
local blockSize = 2
local startPosition = nil
local PreviewPart = nil
local kflxjdhgw = nil
local currentConnection = nil
local FileImage = nil
local HalfblockSize = blockSize / 2
local cooloffset = Vector3.new(0, 0, 0)
local Unit = 45
local Bdepth = 2
local angleY = 0
local ImgCenterimage = nil
local Brainrot = CFrame.identity
local rotationCFrame = CFrame.Angles(0, 0, 0)
local batchSize = 700
local TotalBlockInBlocksFolderBeforeBuildImageInitYesThisVarIsVeryLong = 0
local USEURL = nil
local TempData = {}
local BlockLoaded = true
local TASK1, TASK2, TASK3, TASK4, TASK5 = false, false, false, false, false
local ImageLoading = false
getgenv().ImgLoaderStat = true

local function UUserBlockList()
    UserBlockList = {}
    for _, feuh in ipairs(dataFolder:GetChildren()) do
        if feuh.Value ~= nil then
            UserBlockList[feuh.Name] = feuh.Value
        end
    end
end

local function readFile(filePath)
    if not isfile(filePath) then
        return nil
    end
    return readfile(filePath)
end

local function parseColors(fileContent)
    local data = {}

    for value in string.gmatch(fileContent, "[^,]+") do
        value = value:match("^%s*(.-)%s*$")
        table.insert(data, tonumber(value) or value)
    end
    return data
end

local function calculateFrameSize(data)
    local width = 0
    local height = 0
    local currentWidth = 0

    for i = 1, #data, 3 do
        local r, g, b = data[i], data[i + 1], data[i + 2]

        if r == "B" and g == "B" and b == "B" then
            height += 1
            width = math.max(width, currentWidth)
            currentWidth = 0
        elseif r == "R" and g == "R" and b == "R" then
            currentWidth += 1
        elseif type(r) == "number" and type(g) == "number" and type(b) == "number" then
            currentWidth += 1
        end
    end
    height += 1
    width = math.max(width, currentWidth)
    return Vector3.new(width * blockSize, height * blockSize, Bdepth)
end

local function previewFrame(frameSize, position, blockSize)
    startPosition = LPTEAM()
    if PreviewPart then
        PreviewPart:Destroy()
        PreviewPart = nil
    end

    PreviewPart = Instance.new("Part")
    PreviewPart.Size = frameSize
    PreviewPart.Position = position + Vector3.new(HalfblockSize - blockSize + frameSize.X / 2, HalfblockSize + blockSize - frameSize.Y / 2, 0) + cooloffset
    PreviewPart.Transparency = 1
    PreviewPart.Color = Color3.new(1, 1, 1)
    PreviewPart.Anchored = true
    PreviewPart.CanCollide = false
    PreviewPart.Name = "PreviewSize"
    PreviewPart.Parent = previewFolder
    PreviewPart.Rotation = Vector3.new(0, angleY - 90, 0)

    local textureId = "rbxassetid://133978572926918"

    local function applyTextureToSurface(surface, sizeX, sizeY)
        local texture = Instance.new("Texture")
        texture.Texture = textureId
        texture.Face = surface
        texture.Parent = PreviewPart
        texture.StudsPerTileU = blockSize
        texture.StudsPerTileV = blockSize
        texture.Transparency = 0.2
    end

    applyTextureToSurface(Enum.NormalId.Front, frameSize.X, frameSize.Y)
    applyTextureToSurface(Enum.NormalId.Back, frameSize.X, frameSize.Y)
    applyTextureToSurface(Enum.NormalId.Left, frameSize.Z, frameSize.Y)
    applyTextureToSurface(Enum.NormalId.Right, frameSize.Z, frameSize.Y)
    applyTextureToSurface(Enum.NormalId.Top, frameSize.X, frameSize.Z)
    applyTextureToSurface(Enum.NormalId.Bottom, frameSize.X, frameSize.Z)
end

local function Centerimage(frameSize, position, blockSize)
    startPosition = LPTEAM()
    if kflxjdhgw then
        kflxjdhgw:Destroy()
        kflxjdhgw = nil
    end

    kflxjdhgw = Instance.new("Part")
    kflxjdhgw.Size = frameSize
    kflxjdhgw.Position = position + Vector3.new(HalfblockSize - blockSize + frameSize.X / 2, HalfblockSize + blockSize - frameSize.Y / 2, 0)
    kflxjdhgw.Transparency = 1
    kflxjdhgw.Color = Color3.new(1, 1, 1)
    kflxjdhgw.Anchored = true
    kflxjdhgw.CanCollide = false
    kflxjdhgw.Name = "Centerimage"
    kflxjdhgw.Parent = previewFolder
    return kflxjdhgw.Position
end

local function buildImageFAST()
    ImageLoading = true
    local folder = workspace:FindFirstChild("ImagePreview")
    if not folder then
        return
    end

    for _, part in ipairs(folder:GetChildren()) do
        if part:IsA("BasePart") and part.Name == "Part" then
            part.Transparency = 0.8
        end
    end

    local parts = {}
    for _, part in ipairs(folder:GetChildren()) do
        if part:IsA("BasePart") and part.Name == "Part" then
            table.insert(parts, part)
        end
    end

    if #parts == 0 then
        return
    end

    local paintData = {}

    UUserBlockList()
    local uszLPBlockvalue = UserBlockList[BlockType]
    local Zonesss = LPTEAM2()

    local LNplayer = nil
    if Players.LocalPlayer.Settings.ShareBlocks.Value == false then
        LNplayer = Nplayer
    else
        local playerteam = player.Team.Name
        local blocktoget = game:GetService("Teams"):FindFirstChild(playerteam).TeamLeader.Value
        LNplayer = blocktoget
    end

    for i = 1, #parts do
        if getgenv().ImgLoaderStat == false then
            break
        end
        task.spawn(function()
            local part = parts[i]
            if not part then
                return
            end
            if getgenv().ImgLoaderStat == false then
                return
            end
            local WORLDPOS = part.Position
            local partRot = part.CFrame - part.Position
            local newCFrame = CFrame.new(math.random(-69, 69), math.random(-2200000, -120000), math.random(-69, 69))

            if getgenv().ImgLoaderStat == false then
                return
            end

            local BuildPath = player.Backpack:FindFirstChild("BuildingTool") or player.Character:FindFirstChild("BuildingTool")
            BuildPath.RF:InvokeServer(
                BlockType,
                uszLPBlockvalue,
                workspace:FindFirstChild(Zonesss),
                newCFrame,
                true
            )
        end)
    end

    TASK1 = true
    local blocks = workspace.Blocks:FindFirstChild(LNplayer):GetChildren()

    while #blocks < #parts do
        task.wait(0.5)
        blocks = workspace.Blocks:FindFirstChild(LNplayer):GetChildren()
    end

    ImgParts = workspace.ImagePreview:GetChildren()
    for i = 1, #parts + 1 do
        local color = ImgParts[i].Color
        table.insert(paintData, {
            blocks[TotalBlockInBlocksFolderBeforeBuildImageInitYesThisVarIsVeryLong + i - 1],
            Color3.new(color.R, color.G, color.B)
        })
    end

    local PaintPath = player.Backpack:FindFirstChild("PaintingTool") or player.Character:FindFirstChild("PaintingTool")
    PaintPath.RF:InvokeServer(paintData)

    task.delay(1, function()
        ImageLoading = false
    end)

    for i = 1, #parts do
        if getgenv().ImgLoaderStat == false then
            break
        end
        task.spawn(function()
            local part = parts[i]
            if not part then
                return
            end
            if getgenv().ImgLoaderStat == false then
                return
            end
            local WORLDPOS = part.Position
            local partRot = part.CFrame - part.Position
            local newwCFrame = CFrame.new(WORLDPOS) * partRot * CFrame.Angles(0, math.rad(90), 0)
            local targetBlock = blocks[TotalBlockInBlocksFolderBeforeBuildImageInitYesThisVarIsVeryLong + i]

            if getgenv().ImgLoaderStat == false then
                return
            end

            local ScalePath = player.Backpack:FindFirstChild("ScalingTool") or player.Character:FindFirstChild("ScalingTool")
            ScalePath.RF:InvokeServer(
                targetBlock,
                Vector3.new(Bdepth, blockSize, blockSize),
                newwCFrame
            )
        end)
    end

    TASK2 = true
    ImgParts = workspace.ImagePreview:GetChildren()
    for i = 1, #parts + 1 do
        local color = ImgParts[i].Color
        table.insert(paintData, {
            blocks[TotalBlockInBlocksFolderBeforeBuildImageInitYesThisVarIsVeryLong + i - 1],
            Color3.new(color.R, color.G, color.B)
        })
    end
    
    local PaintPath = player.Backpack:FindFirstChild("PaintingTool") or player.Character:FindFirstChild("PaintingTool")
    PaintPath.RF:InvokeServer(paintData)

    for _, part in ipairs(folder:GetChildren()) do
        part:destroy()
    end

    TASK3 = true
    task.wait(0.15)
    TASK4 = true
    local remote = player.Character:FindFirstChild("DeleteTool") or player.Backpack:FindFirstChild("DeleteTool")
    for i = 1, #blocks do
        task.spawn(function()
            local block = blocks[i]
            if not block then
                return
            end

            local blockY = block.PrimaryPart and block.PrimaryPart.Position.Y or nil
            if blockY and blockY >= -2200000 and blockY <= -120000 then
                    remote.RF:InvokeServer(blocks[i])
            end
        end)
    end 
    TASK5 = true
end

local function buildImagePREVIEW(data, blockSize)
    local frameSize = calculateFrameSize(data)
    startPosition = LPTEAM() + cooloffset
    ImgCenterimage = Centerimage(frameSize, startPosition, blockSize)
    local centerImage = workspace.ImagePreview.Centerimage
    if not centerImage then
        return
    end

    rotationCFrame = CFrame.Angles(0, math.rad(angleY - 90), 0)

    Brainrot = centerImage.CFrame * rotationCFrame
    local currentX = startPosition.X
    local currentY = startPosition.Y
    local currentZ = startPosition.Z
    local initialX = startPosition.X
    local dataIndex = 1

    local centerImage = workspace.ImagePreview.Centerimage
    if not centerImage then
        return
    end

    local centerCFrame = centerImage.CFrame

    if currentConnection then
        currentConnection:Disconnect()
    end

    currentConnection = RunService.Heartbeat:Connect(function()
        local finished = false
        for _ = 1, batchSize do
            if dataIndex > #data then
                finished = true
                break
            end

            local r, g, b = data[dataIndex], data[dataIndex + 1], data[dataIndex + 2]
            if r == "B" and g == "B" and b == "B" then
                currentX = initialX
                currentY = currentY - blockSize
            elseif r == "R" and g == "R" and b == "R" then
                currentX = currentX + blockSize
            elseif type(r) == "number" and type(g) == "number" and type(b) == "number" then

                local block = Instance.new("Part")
                block.Size = Vector3.new(blockSize, blockSize, Bdepth)
                block.Color = Color3.fromRGB(r, g, b)
                block.Anchored = true
                block.Material = Enum.Material.SmoothPlastic
                block.CastShadow = false
                block.Parent = previewFolder

                local blockPosition = Vector3.new(currentX, currentY, currentZ) + cooloffset
                local relativeCFrame = centerCFrame:ToObjectSpace(CFrame.new(blockPosition))
                block.CFrame = Brainrot * relativeCFrame
                currentX = currentX + blockSize
            end

            dataIndex += 3
        end

        if finished then
            currentConnection:Disconnect()
            currentConnection = nil
        end
    end)
end

local URL_RESO_VALUE = 4
local TBLOCK = 0
local BLKLD = 0
local FI = 0

local success, result = pcall(function()
    return request({
        Url = "https://therealasu.pythonanywhere.com/IsActive",
        Method = "POST",
        Headers = {["Content-Type"] = "application/json"
        },
        Body = nil
    })
end)

if success then
    if result.StatusCode == 200 then
        print("Image Loader api is active!")
    else
        warn("Image Loader api is not active")
        return nil
    end
end

Image:Separator({Text="Import"})

local ImgStatus = Image:Label({
	Text = "Status: nil"
})

local CheckBoxText

Image:InputText({
    Placeholder = "https://..",
    Label = "URL",
    Value = "",
    Callback = function(self, Value)
        CheckBoxText = tostring(Value)
	end,
})

Image:InputInt({
    Label = "Resolution",
    Value = 4,
    Callback = function(self, Value)
        URL_RESO_VALUE = tostring(Value)
	end,
})

Image:Label({
	Text = "[Higher = Less blocks]"
})

Image:Button({
	Text = "Import Image",
    BackgroundColor3 = Color3.fromRGB(80, 200, 90),
	Size = UDim2.fromScale(1, 0),
	Callback = function()
        TBLOCK = 0
        BLKLD = 0
        TempData = {}
        USEURL= nil
        cooloffset = Vector3.new(0, 0, 0)
        Brainrot = CFrame.identity
        angleY = 0
        rotationCFrame = CFrame.Angles(0, 0, 0)

        ImgStatus.Text = "Invalid URL"
        ImgStatus.TextColor3 = Color3.fromRGB(245, 60, 60)

        local Text = CheckBoxText
        if string.sub(Text, 1, 6) == "https:" then
            ImgStatus.Text = "Fetching..."
            ImgStatus.TextColor3 = Color3.fromRGB(255, 255, 255)

            local url = "https://therealasu.pythonanywhere.com/process_image"
            local headers = {
                ["Content-Type"] = "application/json"
            }

            local function getImageData(imageUrl, resolution)
                local body = HttpService:JSONEncode({
                    image_url = imageUrl,
                    resolution = resolution
                })

                local success, result = pcall(function()
                    return request({
                        Url = url,
                        Method = "POST",
                        Headers = headers,
                        Body = body
                    })
                end)


                if success then
                    if result.StatusCode == 200 then
                        local responseData = result.Body
                        return responseData
                    else
                        ImgStatus.Text = "Error: check Read Me"
                        ImgStatus.TextColor3 = Color3.fromRGB(245, 60, 60)
                        return nil
                    end
                else
                    ImgStatus.Text = "Error: check Read Me"
                    ImgStatus.TextColor3 = Color3.fromRGB(245, 60, 60)
                    return nil
                end
            end

            local response = getImageData(Text, URL_RESO_VALUE)

            if response then
                local success, result = pcall(function()
                    return HttpService:JSONDecode(response)
                end)
                if success and result then
                    if result.error then
                        ImgStatus.Text = "Error: check Read Me"
                        ImgStatus.TextColor3 = Color3.fromRGB(245, 60, 60)
                    else
                        USEURL = true
                        TempData = response         
                        ImgStatus.Text = "Success: Enable Preview"
                        ImgStatus.TextColor3 = Color3.fromRGB(80, 200, 90)
                    end
                else
                    USEURL = true
                    TempData = response         
                    ImgStatus.Text = "Success: Enable Preview"
                    ImgStatus.TextColor3 = Color3.fromRGB(80, 200, 90)
                end
            else
                ImgStatus.Text = "Error: check Read Me"
                ImgStatus.TextColor3 = Color3.fromRGB(245, 60, 60)
            end
        end
	end,
})

Image:Separator({Text="Preview"})

Image:Checkbox({
	Label = "Preview",
	Value = false,
	Callback = function(self, Value)
        if Value then
            BLKLD = 0
            TBLOCK = 0
            local filePath = "BABFT/Image/" .. (FileImage or "default.txt")
            local fileContent = {}
            if USEURL == false then
                fileContent = readFile(filePath)
            else
                fileContent = TempData
            end
            if not fileContent then return end
            local data
                data = parseColors(fileContent)
            buildImagePREVIEW(data, blockSize)
        else
            for _, skibidi in ipairs(previewFolder:GetChildren()) do
                if skibidi.Name ~= "PreviewSize" then
                    skibidi:Destroy()
                end
            end
        end
	end,
})

Image:Checkbox({
	Label = "Grid",
	Value = false,
	Callback = function(self, Value)
        if Value then
            local filePath = "BABFT/Image/" .. (FileImage or "default.txt")
            local fileContent = {}
            if USEURL == false then
                fileContent = readFile(filePath)
            else
                fileContent = TempData
            end
            if not fileContent then return end
            local data = parseColors(fileContent)
            local frameSize = calculateFrameSize(data)
            startPosition = LPTEAM()
            previewFrame(frameSize, startPosition, blockSize)
        else
            if PreviewPart then
                PreviewPart:Destroy()
                PreviewPart = nil
            end
        end
	end,
})

Image:SliderProgress({
    Label = "Loading Speed",
    Value = 750,
    Minimum = 100,
    Maximum = 4000,
    Size = UDim2.fromScale(0.54, 0.034),
    Callback = function(self, Value)
    batchSize = Value
end,
})

Image:Separator({Text="modifiers"})

Image:Combo({
    Label = "Block",
    Selected = "PlasticBlock",
    Items = {
        "PlasticBlock",
        "CoalBlock", 
        "ConcreteBlock", 
        "FabricBlock", 
        "GlassBlock", 
        "GoldBlock", 
        "GrassBlock", 
        "IceBlock", 
        "MarbleBlock", 
        "MetalBlock", 
        "NeonBlock", 
        "ObsidianBlock", 
        "RustedBlock", 
        "SmoothWoodBlock", 
        "StoneBlock", 
        "TitaniumBlock", 
        "ToyBlock", 
        "WoodBlock"
    },
    Callback = function(self, Value)
        BlockType = Value
    end,
})

Image:InputText({
    Placeholder = "0.1 - 10",
    Label = "Size",
    Value = "2",
    Callback = function(self, Value)
        Value = tonumber(Value)
        if Value < 0.1 or Value > 10 then
            Value = 2
        end
        blockSize = Value
	end,
})

Image:InputInt({
    Label = "Depth",
    Value = 2,
    Callback = function(self, Value)
        Bdepth = tonumber(Value)
        for _, skibidi in ipairs(previewFolder:GetChildren()) do
            skibidi.Size = Vector3.new(skibidi.Size.X, skibidi.Size.Y, Bdepth)
            end
	end,
})

local originalCFrames = {}

Image:InputInt({
    Label = "Rotate",
    Size = UDim2.new(0.7, 0, 0, 20),
    Value = 0,
    Callback = function(self, Value)
        angleY = tonumber(Value)
        if not angleY then
            return
        end

        local centerImage = workspace.ImagePreview:FindFirstChild("Centerimage")
        if not centerImage then
            return
        end

        local rotationCFrame = CFrame.Angles(0, math.rad(angleY), 0)

        Brainrot = centerImage.CFrame * rotationCFrame

        for _, skibidi in ipairs(previewFolder:GetChildren()) do
            if skibidi:IsA("BasePart") and skibidi ~= centerImage then

                local centerCFrame = centerImage.CFrame

                if not originalCFrames[skibidi] then
                    originalCFrames[skibidi] = skibidi.CFrame
                end

                local originalCFrame = originalCFrames[skibidi]
                local relativeCFrame = centerCFrame:ToObjectSpace(originalCFrame)

                local ghaaa = centerCFrame * rotationCFrame * relativeCFrame
                skibidi.CFrame = ghaaa
            end
        end
	end,
})

Image:InputCFrame({
    Label = "Rotate",
    Value = CFrame.new(),
    Minimum = CFrame.new(-360, -360, -360),
    Maximum = CFrame.new(360, 360, 360),
    Callback = function(self, Value)
        local centerImage = workspace.ImagePreview:FindFirstChild("Centerimage")
        if not centerImage then
            return
        end
        local pos = Value.Position

        local rotationCFrame = CFrame.Angles(math.rad(pos.X), math.rad(pos.Y), math.rad(pos.Z))

        Brainrot = centerImage.CFrame * rotationCFrame

        for _, skibidi in ipairs(previewFolder:GetChildren()) do
            if skibidi:IsA("BasePart") and skibidi ~= centerImage then

                local centerCFrame = centerImage.CFrame

                if not originalCFrames[skibidi] then
                    originalCFrames[skibidi] = skibidi.CFrame
                end

                local originalCFrame = originalCFrames[skibidi]
                local relativeCFrame = centerCFrame:ToObjectSpace(originalCFrame)

                local ghaaa = centerCFrame * rotationCFrame * relativeCFrame
                skibidi.CFrame = ghaaa
            end
        end
    end
})

local ImgStatsP = Image:Label({
    TextWrapped = true,
	Text = "Since it's a bit glitched you should rotate first, then move the image"
})

Image:InputInt({
    Label = "Move multiplier",
    Value = 40,
    Size = UDim2.new(0.5, 0, 0, 20),
    Callback = function(self, Value)
        Unit = tostring(Value)
	end,
})

local PositiveMove = Image:Row()
local NegativeMove = Image:Row()

PositiveMove:Button({
	Text = "+ X",
	Size = UDim2.fromScale(0.3, 0),
	Callback = function()
        for _, skibidi in ipairs(previewFolder:GetChildren()) do
            skibidi.Position = skibidi.Position + Vector3.new(Unit, 0, 0)
            end
            cooloffset = cooloffset + Vector3.new(Unit, 0, 0)
	end,
})

PositiveMove:Button({
	Text = "+ Y",
	Size = UDim2.fromScale(0.3, 0),
	Callback = function()
        for _, skibidi in ipairs(previewFolder:GetChildren()) do
            skibidi.Position = skibidi.Position + Vector3.new(0, Unit, 0)
            end
            cooloffset = cooloffset + Vector3.new(0, Unit, 0)
	end,
})

PositiveMove:Button({
	Text = "+ Z",
	Size = UDim2.fromScale(0.3, 0),
	Callback = function()
        for _, skibidi in ipairs(previewFolder:GetChildren()) do
            skibidi.Position = skibidi.Position + Vector3.new(0, 0, Unit)
            end
            cooloffset = cooloffset + Vector3.new(0, 0, Unit)
	end,
})

NegativeMove:Button({
	Text = "- X",
	Size = UDim2.fromScale(0.3, 0),
	Callback = function()
        for _, skibidi in ipairs(previewFolder:GetChildren()) do
            skibidi.Position = skibidi.Position + Vector3.new(-Unit, 0, 0)
            end
            cooloffset = cooloffset + Vector3.new(-Unit, 0, 0)
	end,
})

NegativeMove:Button({
	Text = "- Y",
	Size = UDim2.fromScale(0.3, 0),
	Callback = function()
            for _, skibidi in ipairs(previewFolder:GetChildren()) do
                skibidi.Position = skibidi.Position + Vector3.new(0, -Unit, 0)
                end
                cooloffset = cooloffset + Vector3.new(0, -Unit, 0)
	end,
})

NegativeMove:Button({
	Text = "- Z",
	Size = UDim2.fromScale(0.3, 0),
	Callback = function()
        for _, skibidi in ipairs(previewFolder:GetChildren()) do
            skibidi.Position = skibidi.Position + Vector3.new(0, 0, -Unit)
            end
            cooloffset = cooloffset + Vector3.new(0, 0, -Unit)
	end,
})

Image:Separator({Text="Build"})

local TotalBlockInBlocksFolderBeforeBuildImageInitYesThisVarIsVeryLongButThisOneChangeLol = 0
local TotalBlockInBlocksFolderBeforeBuildImageInitYesThisVarIsVeryLongButThisOneDoesntChangeLol = 0

local ImgStatsP = Image:Label({
    TextWrapped = true,
	Text = "Info: Enable preview before build"
})

local ProgressBar = Image:ProgressBar({
	Label = "Progress",
	Percentage = 0
})

Image:Button({
	Text = "Build Image",
	Size = UDim2.fromScale(1, 0),
	Callback = function()
        ImgStatsP.Text = "Info: starting"
        ImgStatsP.TextColor3 = Color3.fromRGB(255, 255, 255)
        task.wait(0.15)

        TBLOCK = 0
TotalBlockInBlocksFolderBeforeBuildImageInitYesThisVarIsVeryLong = 0

local blocksFolder = workspace:FindFirstChild("Blocks")
if blocksFolder then
    local blockssFolder = blocksFolder:FindFirstChild(Nplayer)
    if blockssFolder then
        TotalBlockInBlocksFolderBeforeBuildImageInitYesThisVarIsVeryLong = #blockssFolder:GetChildren()
        TotalBlockInBlocksFolderBeforeBuildImageInitYesThisVarIsVeryLongButThisOneDoesntChangeLol = #blockssFolder:GetChildren()
        local parts = {}
        local folder = workspace:FindFirstChild("ImagePreview")
        local children = folder:GetChildren()
        if #children <= 1 then
            ImgStatsP.TextColor3 = Color3.fromRGB(245, 60, 60)
            ImgStatsP.Text = "Error: Enable Preview"
            return
        end

        for _, part in ipairs(children) do
            if part:IsA("BasePart") and part.Name == "Part" then
                table.insert(parts, part)
            end
        end
        TBLOCK = #parts
    else
        ImgStatsP.TextColor3 = Color3.fromRGB(245, 60, 60)
        ImgStatsP.Text = "Error: Disable Fps Booster"
    end
else
    ImgStatsP.TextColor3 = Color3.fromRGB(245, 60, 60)
    ImgStatsP.Text = "Error: Disable Fps Booster"
end
        BlockLoaded = false
        ImageLoading = true
        getgenv().ImgLoaderStat = true
        ProgressBar:SetPercentage(0)
        task.spawn(buildImageFAST)
    end,
 })

Image:Button({
	Text = "Abort",
	Size = UDim2.fromScale(1, 0),
	Callback = function()
        getgenv().ImgLoaderStat = false
        ImgStatsP.Text = "Abortion requested"
            task.delay(1, function()
                ImgStatsP.Text = "Image Aborted"
            end)
            task.delay(1, function()
                ImgStatsP.Text = "Unplaced Blocks deleted."
            end)
            ImageLoading = false
	end,
})

Image:Separator({Text="Info"})

Image:Label({
    TextWrapped = true,
	Text = "Require to own all the blocks, require painting and scaling tools. Do not place block when building the image."
})

Image:Label({
    TextWrapped = true,
	Text = "Re enable preview after changing the size, if the image get glitched, re enable preview.\n"
})

-- BlockNeeded

BlockNeeded:Separator({Text="Image Block List"})

local ImgTable = BlockNeeded:Table({
	RowBackground = true,
	Border = true,
	RowsFill = false,
	Size = UDim2.fromScale(1, 0)
})

ImgTable:ClearRows()
local ColName = ImgTable:Row()
local ImgName = ColName:Column()
local BlockName = ColName:Column()
local NeededName = ColName:Column()
local MissingName = ColName:Column()

ImgName:Label({
    Text = `Block`,
})

BlockName:Label({
    TextWrapped = true,
    Text = `Type`
})

NeededName:Label({
    Text = `Need`
})

MissingName:Label({
    Text = `Missing`
})

local Row = ImgTable:Row()
local Img = Row:Column()
local Name = Row:Column()
local Needed = Row:Column()
local Missing = Row:Column()

BlockNeeded:Separator({Text="Button"})

local NbBlockneeded = 0
local NbBlockmissing = 0

BlockNeeded:Button({
	Text = "Refresh List",
	Size = UDim2.fromScale(1, 0),
	Callback = function()
        NbBlockneeded = 0
        ImgTable:ClearRows()
        local ColName = ImgTable:Row()
ImgName = ColName:Column()
BlockName = ColName:Column()
NeededName = ColName:Column()
MissingName = ColName:Column()

for _, skibidi in ipairs(workspace.ImagePreview:GetChildren()) do
    if skibidi.Name == "Part" then

        local blockVolume = skibidi.Size.X * skibidi.Size.Y * skibidi.Size.Z

        local blockSize = (blockVolume < 8) and 8 or blockVolume

        NbBlockneeded = NbBlockneeded + blockSize
    end
end

UUserBlockList()
LPBlockvalue = UserBlockList[BlockType]
NbBlockneeded = math.ceil(NbBlockneeded / 8)
NbBlockmissing = NbBlockneeded - LPBlockvalue
if NbBlockmissing < 0 then
  NbBlockmissing = 0
end

ImgName:Label({
    Text = `Block`,
})

BlockName:Label({
    TextWrapped = true,
    Text = `Type`,
})

NeededName:Label({
    Text = `Need`,
})

MissingName:Label({
    Text = `Missing`,
})

local blocktypeID = BlockId[BlockType]

         Row = ImgTable:Row()
         Img = Row:Column()
       Name = Row:Column()
        Needed = Row:Column()
     Missing = Row:Column()

     Img:Image({
        Image = blocktypeID,
        Ratio = 1/1,
        AspectType = Enum.AspectType.FitWithinMaxSize,
        Size = UDim2.fromScale(1, 1)
    })

    Name:Label({
        TextWrapped = true,
        Text = tostring(BlockType)
    })

    Needed:Label({
        Text = tostring(NbBlockneeded)
    })

    Missing:Label({
        Text = tostring(NbBlockmissing)
    })
	end,
})

BlockNeeded:Button({
	Text = "Copy List [not working for now]",
	Size = UDim2.fromScale(1, 0),
	Callback = function()

	end,
})